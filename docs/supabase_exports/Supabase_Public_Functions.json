[
  {
    "function_name": "handle_reservation_expiration",
    "function_definition": "\nBEGIN\n    -- Ensure reserved items always have an expiration date\n    IF NEW.status = 'reserved' AND NEW.expires_at IS NULL THEN\n        NEW.expires_at := NEW.reserved_at + INTERVAL '7 days';\n    END IF;\n\n    -- Check if the reservation has expired\n    IF NEW.status = 'reserved' AND NEW.expires_at < NOW() THEN\n        NEW.status := 'expired';\n        NEW.position_in_queue := NULL;\n        \n        -- Find and update the next in_queue reservation if any\n        WITH next_in_line AS (\n            SELECT id\n            FROM reservations\n            WHERE release_id = NEW.release_id\n            AND status = 'in_queue'\n            ORDER BY position_in_queue ASC\n            LIMIT 1\n        )\n        UPDATE reservations\n        SET status = 'reserved',\n            position_in_queue = NULL,\n            reserved_at = NOW(),\n            expires_at = NOW() + INTERVAL '7 days'\n        WHERE id IN (SELECT id FROM next_in_line);\n    END IF;\n    \n    RETURN NEW;\nEND;\n",
    "arguments": "",
    "result_type": "trigger"
  },
  {
    "function_name": "cleanup_expired_reservations",
    "function_definition": "\nDECLARE\n    _debug_info text;\nBEGIN\n    -- Ensure single reserved item per release\n    WITH duplicate_reserves AS (\n        SELECT \n            id,\n            release_id,\n            reserved_at,\n            ROW_NUMBER() OVER (PARTITION BY release_id ORDER BY reserved_at DESC) as rn\n        FROM reservations\n        WHERE status = 'reserved'\n    )\n    UPDATE reservations r\n    SET status = 'in_queue',\n        position_in_queue = (\n            SELECT COALESCE(MAX(position_in_queue), 0) + 1\n            FROM reservations\n            WHERE release_id = dr.release_id\n            AND status = 'in_queue'\n        )\n    FROM duplicate_reserves dr\n    WHERE r.id = dr.id AND dr.rn > 1;\n\n    -- Ensure all reserved items have an expiration date\n    UPDATE reservations\n    SET expires_at = reserved_at + INTERVAL '7 days'\n    WHERE status = 'reserved' \n    AND expires_at IS NULL;\n\n    -- Update expired reservations\n    UPDATE reservations\n    SET status = 'expired',\n        position_in_queue = NULL,\n        expires_at = reserved_at + INTERVAL '7 days'\n    WHERE status = 'reserved'\n    AND expires_at < NOW();\n    \n    -- Promote in_queue reservations where possible\n    WITH available_releases AS (\n        SELECT DISTINCT r1.release_id\n        FROM reservations r1\n        WHERE r1.status = 'expired'\n        AND NOT EXISTS (\n            SELECT 1 FROM reservations r2\n            WHERE r2.release_id = r1.release_id\n            AND r2.status = 'reserved'\n        )\n    ),\n    next_in_line AS (\n        SELECT DISTINCT ON (r.release_id) \n            r.id,\n            r.release_id\n        FROM reservations r\n        JOIN available_releases ar ON r.release_id = ar.release_id\n        WHERE r.status = 'in_queue'\n        ORDER BY r.release_id, r.position_in_queue ASC\n        LIMIT 1\n    )\n    UPDATE reservations r\n    SET status = 'reserved',\n        position_in_queue = NULL,\n        reserved_at = NOW(),\n        expires_at = NOW() + INTERVAL '7 days'\n    FROM next_in_line n\n    WHERE r.id = n.id;\n\n    -- Reorder queue positions to ensure no gaps\n    WITH ranked_queue AS (\n        SELECT \n            id,\n            release_id,\n            ROW_NUMBER() OVER (PARTITION BY release_id ORDER BY position_in_queue) as new_position\n        FROM reservations\n        WHERE status = 'in_queue'\n    )\n    UPDATE reservations r\n    SET position_in_queue = rq.new_position\n    FROM ranked_queue rq\n    WHERE r.id = rq.id;\nEND;\n",
    "arguments": "",
    "result_type": "void"
  }
]